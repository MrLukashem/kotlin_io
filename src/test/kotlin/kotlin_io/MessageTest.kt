/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package kotlin_io

import kotlin_io.Message
import kotlin.test.*

import java.util.*


class MessageTest {
    @Test fun `test simple message values`() {
        val message = Message.create(2, byteArrayOf())
        assertEquals(message.msgId, message.hashCode())
        assertEquals(message.msgType, 2)
        assertEquals(message.answerTo, Int.MIN_VALUE)
        assertTrue(message.payload.isEmpty())
    }

    @Test fun `test message with custom byte array`() {
        val message = Message.create(
                32, byteArrayOf(0xFF.toByte(), 0x32.toByte(), 0x00.toByte()), 2)
        assertEquals(message.msgId, message.hashCode())
        assertEquals(message.msgType, 32)
        assertEquals(message.answerTo, 2)
        assertTrue(message.payload.contentEquals(byteArrayOf(0xFF.toByte(), 0x32.toByte(), 0x00.toByte())))
    }

    @Test fun `test message creation using factory method`() {
        val inputArray = byteArrayOf(
                0x00, 0x00, 0x00, 0x80.toByte(),
                0x00, 0x00, 0x00, 0x00,
                0x01, 0x02, 0x32, 0x32)
        val message = Message.fromRawData(inputArray)

        assertEquals(message.msgId, message.hashCode())
        assertEquals(message.msgType, 128)
        assertEquals(message.answerTo, 0)
        assertTrue(message.payload.contentEquals(byteArrayOf(0x01, 0x02, 0x32, 0x32)))
    }

    @Test fun `test message with too short input byte data`() {
        val inputArray = byteArrayOf(
                0x00, 0x21, 0x00, 0x05, 0x00, 0x63, 0x03)

        assertFailsWith<Message.MalformedDataException>() {
            Message.fromRawData(inputArray)
        }
    }

    @Test fun `test message with input data with no payload`() {
        val inputArray = byteArrayOf(
                0x00, 0x00, 0x00, 0x80.toByte(),
                0x00, 0x00, 0x00, 0x02)

        val message = Message.fromRawData(inputArray)
        assertEquals(message.msgId, message.hashCode())
        assertEquals(message.msgType, 128)
        assertEquals(message.answerTo, 2)
        assertTrue(message.payload.isEmpty())
    }

    @Test fun `test message with input data one byte too short - size equals minimum size`() {
        val inputArray = byteArrayOf(
                0x00, 0x00, 0x00, 0x05,
                0x00, 0x00, 0x32 /*lack of one byte to meet minimum size requirements*/)
        
        assertFailsWith<Message.MalformedDataException>() {
            Message.fromRawData(inputArray)
        }
    }
}