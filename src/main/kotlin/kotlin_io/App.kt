/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package kotlin_io

import kotlin_io.SocketBasedDataChannel
import kotlin_io.SocketBasedDataChannelListener

import kotlin.concurrent.*
import kotlin.io.*

import java.io.IOException
import java.io.PrintWriter
import java.net.ServerSocket
import java.net.Socket
import java.util.Date

import org.slf4j.Logger
import org.slf4j.LoggerFactory

class App {
    val greeting: String
        get() {
            return "Hello world."
        }
}

fun doSend(pool: MessagesPool) {
    println("Please provide ip address where send a message")
    val ip = readLine()

    println("Please provide port address of the receiver")
    val port = readLine()?.toInt()

    println("Please provide message type")
    val type = readLine()?.toInt()

    pool.send(ip!!, port!!, Message.create(type!!, byteArrayOf()))

    println("Sending...")
    println("Done")
}

fun doListen(pool: MessagesPool) {
    println("Please provide port address where to listen")
    val port = readLine()?.toInt()

    pool.listen(port!!) {
        println("Message received. From port = $port")
    }
}

fun doStop(pool: MessagesPool) {
    val port = readLine()?.toInt()

    pool.stop(port!!)
}

fun main(args: Array<String>) {
    val logger: Logger = LoggerFactory.getLogger("SocketBasedDataChannelListener")

    if (args.isEmpty()) {
        logger.error("No arguments had been provided. Exiting application.")
        return
    }

    val pool = SocketBasedMessagesPool(::SocketBasedDataChannel, ::SocketBasedDataChannelListener)

    while(true) {
        println("Please provide operation type")
        println("1: send(ipAddress: String, port: Int, message: Message)")
        println("2: listen(port: Int, receiver: Receiver)")
        println("3: stop(port: Int)")
        println("4: exist the app")

        when(readLine()?.toInt()) {
            1 -> doSend(pool)
            2 -> doListen(pool)
            4 -> doStop(pool)
            else -> return
        }
    }
}
